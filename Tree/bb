ven a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).

For example, this binary tree [1,2,2,3,4,4,3] is symmetric


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        /*queue<TreeNode*> q1,q2;
        if(!root)
         return true;
        TreeNode* itleft,*itright;
        q1.push(root->left);
        q2.push(root->right);
        while(!q1.empty() && !q2.empty())
        {
        itleft=q1.front();
        itright=q2.front();
        q1.pop();
        q2.pop();
        if(itleft==NULL && itright==NULL)
         continue;
        else if((itleft==NULL && itright !=NULL)||(itleft !=NULL && itright==NULL) || (itleft->val != itright->val))
          return false;
          else
          {
              
        q1.push(itleft->left);
        q1.push(itleft->right);
        q2.push(itright->right);
        q2.push(itright->left);
          }
        }
      return true;*/
      if(!root)
      return true;
      else
       return helper(root->left,root->right);
        
    }
     bool helper(TreeNode* p, TreeNode* q) {
        if (!p && !q) {
            return true;
        } else if (!p || !q) {
            return false;
        }

        if (p->val != q->val) {
            return false;
        }

        return helper(p->left,q->right) && helper(p->right, q->left); 
    }
};
